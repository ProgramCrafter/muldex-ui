@function strip-unit($value) {
  @return $value / ($value * 0 + 1);
}

@mixin animation($animation, $duration, $timing, $delay, $iteration) {
  animation-delay: $delay;
  animation-duration: $duration;
  animation-iteration-count: $iteration;
  animation-name: $animation;
  animation-timing-function: $timing;
}

@mixin border-radius($value) {
  border-radius: $value;
}

@mixin box-shadow($value) {
  box-shadow: $value;
}

@mixin btn_style {
  @include border-radius(5px);
  @include gradient;

  border: none;
  color: $white;
  display: inline-block;
  font-family: $mulish;
  font-weight: 700;
  line-height: 1.5;
  outline: none;
  padding: 16px 32px;
  text-decoration: none;
  text-transform: uppercase;

  &:hover {
    border: none;
    outline: none;
  }
  &:focus {
    @include box-shadow(none);
    border: none;
    outline: none;
  }
}

@mixin gradient {
  background-image: linear-gradient(
    135deg,
    rgb(0, 136, 204) 0%,
    rgba(48, 55, 87) 100%
  );
}

@mixin fluid-typography($min-vw, $max-vw, $min-font-size, $max-font-size) {
  $u1: unit($min-vw);
  $u2: unit($max-vw);
  $u3: unit($min-font-size);
  $u4: unit($max-font-size);

  @if $u1 == $u2 and $u1 == $u3 and $u1 == $u4 {
    & {
      font-size: $min-font-size;
      @media screen and (min-width: $min-vw) {
        font-size: calc(
          #{$min-font-size} + #{strip-unit($max-font-size - $min-font-size)} *
            ((100vw - #{$min-vw}) / #{strip-unit($max-vw - $min-vw)})
        );
      }
      @media screen and (min-width: $max-vw) {
        font-size: $max-font-size;
      }
    }
  }
}

@mixin transform($value) {
  -webkit-transform: $value;
  -ms-transform: $value;
  transform: $value;
}

@mixin transition($value) {
  -webkit-transition: $value;
  -o-transition: $value;
  transition: $value;
}
